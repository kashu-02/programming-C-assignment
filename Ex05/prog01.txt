int array[]: アドレスは4ずつ増える。
Sizeof演算子より、int型は4バイトとされているため、それが格納できるサイズの領域が確保されるため。

long l_array[]: アドレスは8ずつ増える。
同様に、long型は8バイトとされているため、それが格納できるサイズの領域が確保されるため。

double d_array[]: アドレスは8ずつ増える。
同様に、double型は8バイトとされているため、それが格納できるサイズの領域が確保されるため。

char c_array[]: アドレスは1ずつ増える。
char型は1バイトとされているため、それが格納できるサイズの領域が確保されるため。

char c_2d_array[][7]: アドレスは7ずつ増える。
宣言時に、二次元配列のいわゆる列に当たる部分を7としているため、char型の7バイト分が各要素に確保されるため。

char *str_array[]: アドレスは8ずつ増える。
文字列定数配列はポインタ変数を利用しているため、8バイトが確保されるため。